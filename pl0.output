Grammar

    0 $accept: program $end

    1 program: block "."

    2 block: constDecls varDecls procDecls stmt

    3 constDecls: empty
    4           | constDecls constDecl

    5 constDecl: "const" constDefs ";"

    6 constDefs: constDef
    7          | constDefs "," constDef

    8 constDef: identsym "=" numbersym

    9 varDecls: empty
   10         | varDecls varDecl

   11 varDecl: "var" idents ";"

   12 idents: identsym
   13       | idents "," identsym

   14 procDecls: empty
   15          | procDecls procDecl

   16 procDecl: "procedure" identsym ";" block ";"

   17 stmt: assignStmt
   18     | callStmt
   19     | beginStmt
   20     | ifStmt
   21     | whileStmt
   22     | readStmt
   23     | writeStmt
   24     | skipStmt

   25 assignStmt: identsym ":=" expr

   26 callStmt: "call" identsym

   27 beginStmt: "begin" stmts "end"

   28 ifStmt: "if" condition "then" stmt "else" stmt

   29 whileStmt: "while" condition "do" stmt

   30 readStmt: "read" identsym

   31 writeStmt: "write" expr

   32 skipStmt: "skip"

   33 stmts: stmt
   34      | stmts ";" stmt

   35 condition: oddCondition
   36          | relOpCondition

   37 oddCondition: "odd" expr

   38 relOpCondition: expr relOp expr

   39 relOp: "="
   40      | "<>"
   41      | "<"
   42      | "<="
   43      | ">"
   44      | ">="

   45 expr: term
   46     | expr "+" term
   47     | expr "-" term

   48 term: factor
   49     | term "*" factor
   50     | term "/" factor

   51 factor: identsym
   52       | "-" numbersym
   53       | posSign numbersym
   54       | "(" expr ")"

   55 posSign: "+"
   56        | empty

   57 empty: ε


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    identsym <ident> (258) 8 12 13 16 25 26 30 51
    numbersym <number> (259) 8 52 53
    "+" <token> (260) 46 55
    "-" <token> (261) 47 52
    "*" <token> (262) 49
    "/" <token> (263) 50
    "." <token> (264) 1
    ";" <token> (265) 5 11 16 34
    "=" <token> (266) 8 39
    "," <token> (267) 7 13
    ":=" <token> (268) 25
    "const" <token> (269) 5
    "var" <token> (270) 11
    "procedure" <token> (271) 16
    "call" <token> (272) 26
    "begin" <token> (273) 27
    "end" <token> (274) 27
    "if" <token> (275) 28
    "then" <token> (276) 28
    "else" <token> (277) 28
    "while" <token> (278) 29
    "do" <token> (279) 29
    "read" <token> (280) 30
    "write" <token> (281) 31
    "skip" <token> (282) 32
    "odd" <token> (283) 37
    "<>" <token> (284) 40
    "<" <token> (285) 41
    "<=" <token> (286) 42
    ">" <token> (287) 43
    ">=" <token> (288) 44
    "(" <token> (289) 54
    ")" <token> (290) 54


Nonterminals, with rules where they appear

    $accept (36)
        on left: 0
    program <block> (37)
        on left: 1
        on right: 0
    block <block> (38)
        on left: 2
        on right: 1 16
    constDecls <const_decls> (39)
        on left: 3 4
        on right: 2 4
    constDecl <const_decl> (40)
        on left: 5
        on right: 4
    constDefs <const_defs> (41)
        on left: 6 7
        on right: 5 7
    constDef <const_def> (42)
        on left: 8
        on right: 6 7
    varDecls <var_decls> (43)
        on left: 9 10
        on right: 2 10
    varDecl <var_decl> (44)
        on left: 11
        on right: 10
    idents <idents> (45)
        on left: 12 13
        on right: 11 13
    procDecls <proc_decls> (46)
        on left: 14 15
        on right: 2 15
    procDecl <proc_decl> (47)
        on left: 16
        on right: 15
    stmt <stmt> (48)
        on left: 17 18 19 20 21 22 23 24
        on right: 2 28 29 33 34
    assignStmt <assign_stmt> (49)
        on left: 25
        on right: 17
    callStmt <call_stmt> (50)
        on left: 26
        on right: 18
    beginStmt <begin_stmt> (51)
        on left: 27
        on right: 19
    ifStmt <if_stmt> (52)
        on left: 28
        on right: 20
    whileStmt <while_stmt> (53)
        on left: 29
        on right: 21
    readStmt <read_stmt> (54)
        on left: 30
        on right: 22
    writeStmt <write_stmt> (55)
        on left: 31
        on right: 23
    skipStmt <skip_stmt> (56)
        on left: 32
        on right: 24
    stmts <stmts> (57)
        on left: 33 34
        on right: 27 34
    condition <condition> (58)
        on left: 35 36
        on right: 28 29
    oddCondition <odd_condition> (59)
        on left: 37
        on right: 35
    relOpCondition <rel_op_condition> (60)
        on left: 38
        on right: 36
    relOp <token> (61)
        on left: 39 40 41 42 43 44
        on right: 38
    expr <expr> (62)
        on left: 45 46 47
        on right: 25 31 37 38 46 47 54
    term <expr> (63)
        on left: 48 49 50
        on right: 45 46 47 49 50
    factor <expr> (64)
        on left: 51 52 53 54
        on right: 48 49 50
    posSign <token> (65)
        on left: 55 56
        on right: 53
    empty <empty> (66)
        on left: 57
        on right: 3 9 14 56


State 0

    0 $accept: • program $end

    $default  reduce using rule 57 (empty)

    program     go to state 1
    block       go to state 2
    constDecls  go to state 3
    empty       go to state 4


State 1

    0 $accept: program • $end

    $end  shift, and go to state 5


State 2

    1 program: block • "."

    "."  shift, and go to state 6


State 3

    2 block: constDecls • varDecls procDecls stmt
    4 constDecls: constDecls • constDecl

    "const"  shift, and go to state 7

    $default  reduce using rule 57 (empty)

    constDecl  go to state 8
    varDecls   go to state 9
    empty      go to state 10


State 4

    3 constDecls: empty •

    $default  reduce using rule 3 (constDecls)


State 5

    0 $accept: program $end •

    $default  accept


State 6

    1 program: block "." •

    $default  reduce using rule 1 (program)


State 7

    5 constDecl: "const" • constDefs ";"

    identsym  shift, and go to state 11

    constDefs  go to state 12
    constDef   go to state 13


State 8

    4 constDecls: constDecls constDecl •

    $default  reduce using rule 4 (constDecls)


State 9

    2 block: constDecls varDecls • procDecls stmt
   10 varDecls: varDecls • varDecl

    "var"  shift, and go to state 14

    $default  reduce using rule 57 (empty)

    varDecl    go to state 15
    procDecls  go to state 16
    empty      go to state 17


State 10

    9 varDecls: empty •

    $default  reduce using rule 9 (varDecls)


State 11

    8 constDef: identsym • "=" numbersym

    "="  shift, and go to state 18


State 12

    5 constDecl: "const" constDefs • ";"
    7 constDefs: constDefs • "," constDef

    ";"  shift, and go to state 19
    ","  shift, and go to state 20


State 13

    6 constDefs: constDef •

    $default  reduce using rule 6 (constDefs)


State 14

   11 varDecl: "var" • idents ";"

    identsym  shift, and go to state 21

    idents  go to state 22


State 15

   10 varDecls: varDecls varDecl •

    $default  reduce using rule 10 (varDecls)


State 16

    2 block: constDecls varDecls procDecls • stmt
   15 procDecls: procDecls • procDecl

    identsym     shift, and go to state 23
    "procedure"  shift, and go to state 24
    "call"       shift, and go to state 25
    "begin"      shift, and go to state 26
    "if"         shift, and go to state 27
    "while"      shift, and go to state 28
    "read"       shift, and go to state 29
    "write"      shift, and go to state 30
    "skip"       shift, and go to state 31

    procDecl    go to state 32
    stmt        go to state 33
    assignStmt  go to state 34
    callStmt    go to state 35
    beginStmt   go to state 36
    ifStmt      go to state 37
    whileStmt   go to state 38
    readStmt    go to state 39
    writeStmt   go to state 40
    skipStmt    go to state 41


State 17

   14 procDecls: empty •

    $default  reduce using rule 14 (procDecls)


State 18

    8 constDef: identsym "=" • numbersym

    numbersym  shift, and go to state 42


State 19

    5 constDecl: "const" constDefs ";" •

    $default  reduce using rule 5 (constDecl)


State 20

    7 constDefs: constDefs "," • constDef

    identsym  shift, and go to state 11

    constDef  go to state 43


State 21

   12 idents: identsym •

    $default  reduce using rule 12 (idents)


State 22

   11 varDecl: "var" idents • ";"
   13 idents: idents • "," identsym

    ";"  shift, and go to state 44
    ","  shift, and go to state 45


State 23

   25 assignStmt: identsym • ":=" expr

    ":="  shift, and go to state 46


State 24

   16 procDecl: "procedure" • identsym ";" block ";"

    identsym  shift, and go to state 47


State 25

   26 callStmt: "call" • identsym

    identsym  shift, and go to state 48


State 26

   27 beginStmt: "begin" • stmts "end"

    identsym  shift, and go to state 23
    "call"    shift, and go to state 25
    "begin"   shift, and go to state 26
    "if"      shift, and go to state 27
    "while"   shift, and go to state 28
    "read"    shift, and go to state 29
    "write"   shift, and go to state 30
    "skip"    shift, and go to state 31

    stmt        go to state 49
    assignStmt  go to state 34
    callStmt    go to state 35
    beginStmt   go to state 36
    ifStmt      go to state 37
    whileStmt   go to state 38
    readStmt    go to state 39
    writeStmt   go to state 40
    skipStmt    go to state 41
    stmts       go to state 50


State 27

   28 ifStmt: "if" • condition "then" stmt "else" stmt

    identsym  shift, and go to state 51
    "+"       shift, and go to state 52
    "-"       shift, and go to state 53
    "odd"     shift, and go to state 54
    "("       shift, and go to state 55

    $default  reduce using rule 57 (empty)

    condition       go to state 56
    oddCondition    go to state 57
    relOpCondition  go to state 58
    expr            go to state 59
    term            go to state 60
    factor          go to state 61
    posSign         go to state 62
    empty           go to state 63


State 28

   29 whileStmt: "while" • condition "do" stmt

    identsym  shift, and go to state 51
    "+"       shift, and go to state 52
    "-"       shift, and go to state 53
    "odd"     shift, and go to state 54
    "("       shift, and go to state 55

    $default  reduce using rule 57 (empty)

    condition       go to state 64
    oddCondition    go to state 57
    relOpCondition  go to state 58
    expr            go to state 59
    term            go to state 60
    factor          go to state 61
    posSign         go to state 62
    empty           go to state 63


State 29

   30 readStmt: "read" • identsym

    identsym  shift, and go to state 65


State 30

   31 writeStmt: "write" • expr

    identsym  shift, and go to state 51
    "+"       shift, and go to state 52
    "-"       shift, and go to state 53
    "("       shift, and go to state 55

    $default  reduce using rule 57 (empty)

    expr     go to state 66
    term     go to state 60
    factor   go to state 61
    posSign  go to state 62
    empty    go to state 63


State 31

   32 skipStmt: "skip" •

    $default  reduce using rule 32 (skipStmt)


State 32

   15 procDecls: procDecls procDecl •

    $default  reduce using rule 15 (procDecls)


State 33

    2 block: constDecls varDecls procDecls stmt •

    $default  reduce using rule 2 (block)


State 34

   17 stmt: assignStmt •

    $default  reduce using rule 17 (stmt)


State 35

   18 stmt: callStmt •

    $default  reduce using rule 18 (stmt)


State 36

   19 stmt: beginStmt •

    $default  reduce using rule 19 (stmt)


State 37

   20 stmt: ifStmt •

    $default  reduce using rule 20 (stmt)


State 38

   21 stmt: whileStmt •

    $default  reduce using rule 21 (stmt)


State 39

   22 stmt: readStmt •

    $default  reduce using rule 22 (stmt)


State 40

   23 stmt: writeStmt •

    $default  reduce using rule 23 (stmt)


State 41

   24 stmt: skipStmt •

    $default  reduce using rule 24 (stmt)


State 42

    8 constDef: identsym "=" numbersym •

    $default  reduce using rule 8 (constDef)


State 43

    7 constDefs: constDefs "," constDef •

    $default  reduce using rule 7 (constDefs)


State 44

   11 varDecl: "var" idents ";" •

    $default  reduce using rule 11 (varDecl)


State 45

   13 idents: idents "," • identsym

    identsym  shift, and go to state 67


State 46

   25 assignStmt: identsym ":=" • expr

    identsym  shift, and go to state 51
    "+"       shift, and go to state 52
    "-"       shift, and go to state 53
    "("       shift, and go to state 55

    $default  reduce using rule 57 (empty)

    expr     go to state 68
    term     go to state 60
    factor   go to state 61
    posSign  go to state 62
    empty    go to state 63


State 47

   16 procDecl: "procedure" identsym • ";" block ";"

    ";"  shift, and go to state 69


State 48

   26 callStmt: "call" identsym •

    $default  reduce using rule 26 (callStmt)


State 49

   33 stmts: stmt •

    $default  reduce using rule 33 (stmts)


State 50

   27 beginStmt: "begin" stmts • "end"
   34 stmts: stmts • ";" stmt

    ";"    shift, and go to state 70
    "end"  shift, and go to state 71


State 51

   51 factor: identsym •

    $default  reduce using rule 51 (factor)


State 52

   55 posSign: "+" •

    $default  reduce using rule 55 (posSign)


State 53

   52 factor: "-" • numbersym

    numbersym  shift, and go to state 72


State 54

   37 oddCondition: "odd" • expr

    identsym  shift, and go to state 51
    "+"       shift, and go to state 52
    "-"       shift, and go to state 53
    "("       shift, and go to state 55

    $default  reduce using rule 57 (empty)

    expr     go to state 73
    term     go to state 60
    factor   go to state 61
    posSign  go to state 62
    empty    go to state 63


State 55

   54 factor: "(" • expr ")"

    identsym  shift, and go to state 51
    "+"       shift, and go to state 52
    "-"       shift, and go to state 53
    "("       shift, and go to state 55

    $default  reduce using rule 57 (empty)

    expr     go to state 74
    term     go to state 60
    factor   go to state 61
    posSign  go to state 62
    empty    go to state 63


State 56

   28 ifStmt: "if" condition • "then" stmt "else" stmt

    "then"  shift, and go to state 75


State 57

   35 condition: oddCondition •

    $default  reduce using rule 35 (condition)


State 58

   36 condition: relOpCondition •

    $default  reduce using rule 36 (condition)


State 59

   38 relOpCondition: expr • relOp expr
   46 expr: expr • "+" term
   47     | expr • "-" term

    "+"   shift, and go to state 76
    "-"   shift, and go to state 77
    "="   shift, and go to state 78
    "<>"  shift, and go to state 79
    "<"   shift, and go to state 80
    "<="  shift, and go to state 81
    ">"   shift, and go to state 82
    ">="  shift, and go to state 83

    relOp  go to state 84


State 60

   45 expr: term •
   49 term: term • "*" factor
   50     | term • "/" factor

    "*"  shift, and go to state 85
    "/"  shift, and go to state 86

    $default  reduce using rule 45 (expr)


State 61

   48 term: factor •

    $default  reduce using rule 48 (term)


State 62

   53 factor: posSign • numbersym

    numbersym  shift, and go to state 87


State 63

   56 posSign: empty •

    $default  reduce using rule 56 (posSign)


State 64

   29 whileStmt: "while" condition • "do" stmt

    "do"  shift, and go to state 88


State 65

   30 readStmt: "read" identsym •

    $default  reduce using rule 30 (readStmt)


State 66

   31 writeStmt: "write" expr •
   46 expr: expr • "+" term
   47     | expr • "-" term

    "+"  shift, and go to state 76
    "-"  shift, and go to state 77

    $default  reduce using rule 31 (writeStmt)


State 67

   13 idents: idents "," identsym •

    $default  reduce using rule 13 (idents)


State 68

   25 assignStmt: identsym ":=" expr •
   46 expr: expr • "+" term
   47     | expr • "-" term

    "+"  shift, and go to state 76
    "-"  shift, and go to state 77

    $default  reduce using rule 25 (assignStmt)


State 69

   16 procDecl: "procedure" identsym ";" • block ";"

    $default  reduce using rule 57 (empty)

    block       go to state 89
    constDecls  go to state 3
    empty       go to state 4


State 70

   34 stmts: stmts ";" • stmt

    identsym  shift, and go to state 23
    "call"    shift, and go to state 25
    "begin"   shift, and go to state 26
    "if"      shift, and go to state 27
    "while"   shift, and go to state 28
    "read"    shift, and go to state 29
    "write"   shift, and go to state 30
    "skip"    shift, and go to state 31

    stmt        go to state 90
    assignStmt  go to state 34
    callStmt    go to state 35
    beginStmt   go to state 36
    ifStmt      go to state 37
    whileStmt   go to state 38
    readStmt    go to state 39
    writeStmt   go to state 40
    skipStmt    go to state 41


State 71

   27 beginStmt: "begin" stmts "end" •

    $default  reduce using rule 27 (beginStmt)


State 72

   52 factor: "-" numbersym •

    $default  reduce using rule 52 (factor)


State 73

   37 oddCondition: "odd" expr •
   46 expr: expr • "+" term
   47     | expr • "-" term

    "+"  shift, and go to state 76
    "-"  shift, and go to state 77

    $default  reduce using rule 37 (oddCondition)


State 74

   46 expr: expr • "+" term
   47     | expr • "-" term
   54 factor: "(" expr • ")"

    "+"  shift, and go to state 76
    "-"  shift, and go to state 77
    ")"  shift, and go to state 91


State 75

   28 ifStmt: "if" condition "then" • stmt "else" stmt

    identsym  shift, and go to state 23
    "call"    shift, and go to state 25
    "begin"   shift, and go to state 26
    "if"      shift, and go to state 27
    "while"   shift, and go to state 28
    "read"    shift, and go to state 29
    "write"   shift, and go to state 30
    "skip"    shift, and go to state 31

    stmt        go to state 92
    assignStmt  go to state 34
    callStmt    go to state 35
    beginStmt   go to state 36
    ifStmt      go to state 37
    whileStmt   go to state 38
    readStmt    go to state 39
    writeStmt   go to state 40
    skipStmt    go to state 41


State 76

   46 expr: expr "+" • term

    identsym  shift, and go to state 51
    "+"       shift, and go to state 52
    "-"       shift, and go to state 53
    "("       shift, and go to state 55

    $default  reduce using rule 57 (empty)

    term     go to state 93
    factor   go to state 61
    posSign  go to state 62
    empty    go to state 63


State 77

   47 expr: expr "-" • term

    identsym  shift, and go to state 51
    "+"       shift, and go to state 52
    "-"       shift, and go to state 53
    "("       shift, and go to state 55

    $default  reduce using rule 57 (empty)

    term     go to state 94
    factor   go to state 61
    posSign  go to state 62
    empty    go to state 63


State 78

   39 relOp: "=" •

    $default  reduce using rule 39 (relOp)


State 79

   40 relOp: "<>" •

    $default  reduce using rule 40 (relOp)


State 80

   41 relOp: "<" •

    $default  reduce using rule 41 (relOp)


State 81

   42 relOp: "<=" •

    $default  reduce using rule 42 (relOp)


State 82

   43 relOp: ">" •

    $default  reduce using rule 43 (relOp)


State 83

   44 relOp: ">=" •

    $default  reduce using rule 44 (relOp)


State 84

   38 relOpCondition: expr relOp • expr

    identsym  shift, and go to state 51
    "+"       shift, and go to state 52
    "-"       shift, and go to state 53
    "("       shift, and go to state 55

    $default  reduce using rule 57 (empty)

    expr     go to state 95
    term     go to state 60
    factor   go to state 61
    posSign  go to state 62
    empty    go to state 63


State 85

   49 term: term "*" • factor

    identsym  shift, and go to state 51
    "+"       shift, and go to state 52
    "-"       shift, and go to state 53
    "("       shift, and go to state 55

    $default  reduce using rule 57 (empty)

    factor   go to state 96
    posSign  go to state 62
    empty    go to state 63


State 86

   50 term: term "/" • factor

    identsym  shift, and go to state 51
    "+"       shift, and go to state 52
    "-"       shift, and go to state 53
    "("       shift, and go to state 55

    $default  reduce using rule 57 (empty)

    factor   go to state 97
    posSign  go to state 62
    empty    go to state 63


State 87

   53 factor: posSign numbersym •

    $default  reduce using rule 53 (factor)


State 88

   29 whileStmt: "while" condition "do" • stmt

    identsym  shift, and go to state 23
    "call"    shift, and go to state 25
    "begin"   shift, and go to state 26
    "if"      shift, and go to state 27
    "while"   shift, and go to state 28
    "read"    shift, and go to state 29
    "write"   shift, and go to state 30
    "skip"    shift, and go to state 31

    stmt        go to state 98
    assignStmt  go to state 34
    callStmt    go to state 35
    beginStmt   go to state 36
    ifStmt      go to state 37
    whileStmt   go to state 38
    readStmt    go to state 39
    writeStmt   go to state 40
    skipStmt    go to state 41


State 89

   16 procDecl: "procedure" identsym ";" block • ";"

    ";"  shift, and go to state 99


State 90

   34 stmts: stmts ";" stmt •

    $default  reduce using rule 34 (stmts)


State 91

   54 factor: "(" expr ")" •

    $default  reduce using rule 54 (factor)


State 92

   28 ifStmt: "if" condition "then" stmt • "else" stmt

    "else"  shift, and go to state 100


State 93

   46 expr: expr "+" term •
   49 term: term • "*" factor
   50     | term • "/" factor

    "*"  shift, and go to state 85
    "/"  shift, and go to state 86

    $default  reduce using rule 46 (expr)


State 94

   47 expr: expr "-" term •
   49 term: term • "*" factor
   50     | term • "/" factor

    "*"  shift, and go to state 85
    "/"  shift, and go to state 86

    $default  reduce using rule 47 (expr)


State 95

   38 relOpCondition: expr relOp expr •
   46 expr: expr • "+" term
   47     | expr • "-" term

    "+"  shift, and go to state 76
    "-"  shift, and go to state 77

    $default  reduce using rule 38 (relOpCondition)


State 96

   49 term: term "*" factor •

    $default  reduce using rule 49 (term)


State 97

   50 term: term "/" factor •

    $default  reduce using rule 50 (term)


State 98

   29 whileStmt: "while" condition "do" stmt •

    $default  reduce using rule 29 (whileStmt)


State 99

   16 procDecl: "procedure" identsym ";" block ";" •

    $default  reduce using rule 16 (procDecl)


State 100

   28 ifStmt: "if" condition "then" stmt "else" • stmt

    identsym  shift, and go to state 23
    "call"    shift, and go to state 25
    "begin"   shift, and go to state 26
    "if"      shift, and go to state 27
    "while"   shift, and go to state 28
    "read"    shift, and go to state 29
    "write"   shift, and go to state 30
    "skip"    shift, and go to state 31

    stmt        go to state 101
    assignStmt  go to state 34
    callStmt    go to state 35
    beginStmt   go to state 36
    ifStmt      go to state 37
    whileStmt   go to state 38
    readStmt    go to state 39
    writeStmt   go to state 40
    skipStmt    go to state 41


State 101

   28 ifStmt: "if" condition "then" stmt "else" stmt •

    $default  reduce using rule 28 (ifStmt)
